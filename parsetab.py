
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCHAR COMMA DIVIDE ELSE EQUALS EQUALTO FLOAT FOR GT ID IF INT LBRACE LPAREN LT MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON TIMES WHILEprogram : statementsstatements : statement\n                  | statement statementsdeclaration : type_specifier ID SEMICOLON\n                   | type_specifier ID EQUALS expression SEMICOLONtype_specifier : INT\n                      | CHAR\n                      | FLOATstatement : ID EQUALS expression SEMICOLONstatement : expression SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n                 | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRACE statements RBRACEexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EQUALTO expression\n                  | expression GT expression\n                  | expression LT expressionstatement : type_specifier ID EQUALS expression SEMICOLON'
    
_lr_action_items = {'ID':([0,3,7,10,11,13,14,15,17,18,19,20,21,22,23,24,25,26,29,30,45,46,49,51,52,54,57,58,59,63,64,67,68,],[4,4,28,31,28,-6,-7,-8,28,-10,28,28,28,28,28,28,28,28,28,28,28,-9,28,4,4,-26,28,-11,-13,4,4,-12,-14,]),'IF':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[6,6,-10,-9,6,6,-26,-11,-13,6,6,-12,-14,]),'WHILE':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[8,8,-10,-9,8,8,-26,-11,-13,8,8,-12,-14,]),'FOR':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[9,9,-10,-9,9,9,-26,-11,-13,9,9,-12,-14,]),'MINUS':([0,3,4,5,7,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,57,58,59,60,63,64,67,68,],[11,11,-18,20,11,11,-17,11,-10,11,11,11,11,11,11,11,11,20,-18,11,11,-15,20,-19,-20,-21,-22,20,20,20,20,-16,20,20,11,-9,11,20,11,11,20,-26,11,-11,-13,20,11,11,-12,-14,]),'LPAREN':([0,3,6,7,8,9,11,17,18,19,20,21,22,23,24,25,26,29,30,45,46,49,51,52,54,57,58,59,63,64,67,68,],[7,7,26,7,29,30,7,7,-10,7,7,7,7,7,7,7,7,7,7,7,-9,7,7,7,-26,7,-11,-13,7,7,-12,-14,]),'NUMBER':([0,3,7,11,17,18,19,20,21,22,23,24,25,26,29,30,45,46,49,51,52,54,57,58,59,63,64,67,68,],[12,12,12,12,12,-10,12,12,12,12,12,12,12,12,12,12,12,-9,12,12,12,-26,12,-11,-13,12,12,-12,-14,]),'INT':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[13,13,-10,-9,13,13,-26,-11,-13,13,13,-12,-14,]),'CHAR':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[14,14,-10,-9,14,14,-26,-11,-13,14,14,-12,-14,]),'FLOAT':([0,3,18,46,51,52,54,58,59,63,64,67,68,],[15,15,-10,-9,15,15,-26,-11,-13,15,15,-12,-14,]),'$end':([1,2,3,16,18,46,54,58,59,67,68,],[0,-1,-2,-3,-10,-9,-26,-11,-13,-12,-14,]),'RBRACE':([3,16,18,46,54,55,56,58,59,65,66,67,68,],[-2,-3,-10,-9,-26,58,59,-11,-13,67,68,-12,-14,]),'EQUALS':([4,31,],[17,45,]),'SEMICOLON':([4,5,12,28,32,33,34,35,36,37,38,39,40,42,44,50,53,],[-18,18,-17,-18,-15,46,-19,-20,-21,-22,-23,-24,-25,-16,49,54,57,]),'PLUS':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,19,-17,19,-18,-15,19,-19,-20,-21,-22,19,19,19,19,-16,19,19,19,19,19,]),'TIMES':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,21,-17,21,-18,-15,21,21,21,-21,-22,21,21,21,21,-16,21,21,21,21,21,]),'DIVIDE':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,22,-17,22,-18,-15,22,22,22,-21,-22,22,22,22,22,-16,22,22,22,22,22,]),'EQUALTO':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,23,-17,23,-18,-15,23,-19,-20,-21,-22,23,23,23,23,-16,23,23,23,23,23,]),'GT':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,24,-17,24,-18,-15,24,-19,-20,-21,-22,24,24,24,24,-16,24,24,24,24,24,]),'LT':([4,5,12,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,60,],[-18,25,-17,25,-18,-15,25,-19,-20,-21,-22,25,25,25,25,-16,25,25,25,25,25,]),'RPAREN':([12,27,28,32,34,35,36,37,38,39,40,41,42,43,60,],[-17,42,-18,-15,-19,-20,-21,-22,-23,-24,-25,47,-16,48,62,]),'LBRACE':([47,48,61,62,],[51,52,63,64,]),'ELSE':([58,],[61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,51,52,63,64,],[2,16,55,56,65,66,]),'statement':([0,3,51,52,63,64,],[3,3,3,3,3,3,]),'expression':([0,3,7,11,17,19,20,21,22,23,24,25,26,29,30,45,49,51,52,57,63,64,],[5,5,27,32,33,34,35,36,37,38,39,40,41,43,44,50,53,5,5,60,5,5,]),'type_specifier':([0,3,51,52,63,64,],[10,10,10,10,10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','lalr_parser.py',95),
  ('statements -> statement','statements',1,'p_statements','lalr_parser.py',99),
  ('statements -> statement statements','statements',2,'p_statements','lalr_parser.py',100),
  ('declaration -> type_specifier ID SEMICOLON','declaration',3,'p_declaration','lalr_parser.py',107),
  ('declaration -> type_specifier ID EQUALS expression SEMICOLON','declaration',5,'p_declaration','lalr_parser.py',108),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','lalr_parser.py',115),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','lalr_parser.py',116),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','lalr_parser.py',117),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','lalr_parser.py',121),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','lalr_parser.py',125),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','lalr_parser.py',129),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if','lalr_parser.py',130),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_while','lalr_parser.py',137),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRACE statements RBRACE','statement',11,'p_statement_for','lalr_parser.py',141),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','lalr_parser.py',152),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lalr_parser.py',156),
  ('expression -> NUMBER','expression',1,'p_expression_number','lalr_parser.py',160),
  ('expression -> ID','expression',1,'p_expression_name','lalr_parser.py',164),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lalr_parser.py',168),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lalr_parser.py',169),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lalr_parser.py',170),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lalr_parser.py',171),
  ('expression -> expression EQUALTO expression','expression',3,'p_expression_binop','lalr_parser.py',172),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','lalr_parser.py',173),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','lalr_parser.py',174),
  ('statement -> type_specifier ID EQUALS expression SEMICOLON','statement',5,'p_statement_decl_assign','lalr_parser.py',178),
]
